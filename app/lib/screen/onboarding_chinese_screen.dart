import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class OnboardingChineseScreen extends StatefulWidget {
  const OnboardingChineseScreen({super.key});

  @override
  State<OnboardingChineseScreen> createState() =>
      _OnboardingChineseScreenState();
}

class _OnboardingChineseScreenState extends State<OnboardingChineseScreen> {
  final TextEditingController _emailController = TextEditingController();
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Center(
          child: SingleChildScrollView(
            child: Container(
              width: 370, // Ïù¥ÎØ∏ÏßÄÏùò Ïπ¥Îìú Ìè≠Ïóê ÎßûÏ∂§
              padding: const EdgeInsets.symmetric(vertical: 24, horizontal: 18),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.black, width: 2),
                borderRadius: BorderRadius.circular(8),
                color: Colors.white,
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  // Î°úÍ≥†
                  Image.asset(
                    'assets/logo.png',
                    height: 80,
                  ),
                  const SizedBox(height: 24),
                  // ÏïàÎÇ¥ Î¨∏Íµ¨Îì§
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // 1. ÌòÑÏßÄÏù∏ Îß§Ïπ≠ ÏïàÎÇ¥
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: const [
                          Text('üßë‚Äçü§ù‚Äçüßë ', style: TextStyle(fontSize: 20)),
                          Expanded(
                            child: Text(
                              'ÂíåÂÖ¥Ë∂£Áõ∏ÊäïÁöÑÂΩìÂú∞‰∫∫ÈÖçÂØπÔºå\nÂÉèÊúãÂèã‰∏ÄÊ†∑ÂºÄÂêØÂ±û‰∫é‰Ω†ÁöÑÊú¨Âú∞ÊóÖË°åÔºÅ',
                              style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                  height: 1.5),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 16),
                      // 2. ÌïòÎ£® Í∞ÄÏù¥Îìú ÏïàÎÇ¥
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: const [
                          Text('üó∫Ô∏è ', style: TextStyle(fontSize: 20)),
                          Expanded(
                            child: Text(
                              '‰∏ÄËµ∑ÂéªÂêÉÁæéÈ£ü„ÄÅÂñùÂíñÂï°Ôºå\nÂì™ÊÄïÊòØÁü≠Áü≠ÁöÑ‰∏ÄÂ§©Ôºå‰πüËÉΩÂÉèÂΩìÂú∞‰∫∫‰∏ÄÊ†∑‰ΩìÈ™åÁîüÊ¥ªÔºÅ',
                              style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                  height: 1.5),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 16),
                      // 3. ÏùºÏ†ï ÏÑ§Í≥Ñ ÏïàÎÇ¥
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: const [
                          Text('üí¨ ', style: TextStyle(fontSize: 20)),
                          Expanded(
                            child: Text(
                              'ÊóÖË°åËÆ°ÂàíÂèØ‰ª•Áõ¥Êé•ËÅäÂ§©ÂïÜÈáèÔºå\nÊâÄÊúâË°åÁ®ãÂÆâÊéíÈÉΩËÉΩËΩªÊùæÊêûÂÆöÔºÅ',
                              style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                  height: 1.5),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 16),
                      // 4. Local-it ÏïàÎÇ¥
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // üü© ÎåÄÏã† ÎÖπÏÉâ Ï†ïÏÇ¨Í∞ÅÌòï
                          Container(
                            width: 16,
                            height: 16,
                            margin: const EdgeInsets.only(right: 8, top: 2),
                            decoration: BoxDecoration(
                              color: Colors.green,
                              borderRadius: BorderRadius.circular(3),
                            ),
                          ),
                          Expanded(
                            child: Text.rich(
                              TextSpan(
                                children: [
                                  TextSpan(
                                    text: 'Local-it',
                                    style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                        color: Colors.green,
                                        fontSize: 14),
                                  ),
                                  TextSpan(
                                    text:
                                        "‰∏çÊòØ'ÊêúÁ¥¢ÊôØÁÇπ'ÁöÑÂ∑•ÂÖ∑Ôºå\nËÄåÊòØ‰∏Ä‰∏™'ÈÄöËøá‰∫∫Êù•ËÆ§ËØÜÂüéÂ∏Ç'ÁöÑÊóÖË°åÊúçÂä°„ÄÇ\n‰∏é‰Ω†ÂÖ¥Ë∂£Â•ëÂêàÁöÑÂΩìÂú∞‰∫∫Ôºå‰∏ªÂä®Âêë‰Ω†Êé®ËçêÁâπÂà´ÁöÑÊóÖÁ®ãÔºÅ",
                                    style: TextStyle(
                                        fontSize: 14,
                                        color: Colors.black,
                                        fontWeight: FontWeight.bold,
                                        height: 1.5),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 24),
                      // Ï≤¥ÌÅ¨ ÏïàÎÇ¥
                      const Text(
                        'üëá ÊÉ≥‰∫ÜËß£Êõ¥Â§öÔºüÈ©¨‰∏äÂä†ÊàëÂæÆ‰ø°ÔºÅ',
                        style: TextStyle(
                            fontSize: 15, fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 8),
                      // WeChat ÏïàÎÇ¥
                      const Text(
                        'üì± Â§çÂà∂‰∏ãÊñπÂæÆ‰ø°IDÂπ∂Á≤òË¥¥Âà∞ÂæÆ‰ø°ÊêúÁ¥¢Ê†èÊ∑ªÂä†Â•ΩÂèã',
                        style: TextStyle(
                            fontSize: 15, fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 8),
                      const Text(
                        'üîç ÂæÆ‰ø°IDÔºöLocal-it',
                        style: TextStyle(
                            fontSize: 15, fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 16),
                      // ÎßàÏßÄÎßâ ÏïàÎÇ¥
                      const Text(
                        '‚ú® ÊÉ≥Á¨¨‰∏ÄÊó∂Èó¥Êî∂Âà∞‰∏äÁ∫øÈÄöÁü•Ôºü\nüì© Â°´ÂÜô‰Ω†ÁöÑÈÇÆÁÆ±ÔºåÊàë‰ª¨‰ºöÁ¨¨‰∏ÄÊó∂Èó¥ÂëäËØâ‰Ω†ÔºÅ',
                        style: TextStyle(
                            fontSize: 14, color: Colors.black87, height: 1.5),
                      ),
                    ],
                  ),
                  const SizedBox(height: 36),
                  // Ïù¥Î©îÏùº Îì±Î°ù ÏïàÎÇ¥
                  const Text(
                    'Áïô‰∏ãÈÇÆÁÆ±ÔºåÊàë‰ª¨‰∏Ä‰∏äÁ∫øÂ∞±È©¨‰∏äÂëäËØâ‰Ω†ÔºÅ',
                    style: TextStyle(
                        fontSize: 14, color: Colors.black87, height: 1.5),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  // Ïù¥Î©îÏùº ÏûÖÎ†•
                  GestureDetector(
                    onTap: _showEmailDialog,
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                          vertical: 12, horizontal: 20),
                      decoration: BoxDecoration(
                        border: Border.all(color: Colors.green, width: 2),
                        borderRadius: BorderRadius.circular(8),
                        color: Colors.white,
                      ),
                      child: const Text(
                        '‚úâÔ∏è„ÄêËØ∑ËæìÂÖ•ÈÇÆÁÆ±Âú∞ÂùÄ„Äë',
                        style: TextStyle(
                            fontSize: 15,
                            fontWeight: FontWeight.bold,
                            color: Colors.green),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  void _showEmailDialog() {
    _emailController.clear();
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('ËØ∑ËæìÂÖ•ÈÇÆÁÆ±Âú∞ÂùÄ'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text('Áïô‰∏ãÈÇÆÁÆ±ÔºåÊàë‰ª¨‰∏Ä‰∏äÁ∫øÂ∞±È©¨‰∏äÂëäËØâ‰Ω†ÔºÅ'),
              const SizedBox(height: 16),
              TextField(
                controller: _emailController,
                decoration: const InputDecoration(
                  labelText: 'ÈÇÆÁÆ±Âú∞ÂùÄ',
                  border: OutlineInputBorder(),
                  hintText: 'example@email.com',
                ),
                keyboardType: TextInputType.emailAddress,
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('ÂèñÊ∂à'),
            ),
            ElevatedButton(
              onPressed: _isLoading ? null : _saveEmail,
              child: _isLoading
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2))
                  : const Text('Ê≥®ÂÜå'),
            ),
          ],
        );
      },
    );
  }

  Future<void> _saveEmail() async {
    final email = _emailController.text.trim();

    if (email.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('ËØ∑ËæìÂÖ•ÈÇÆÁÆ±Âú∞ÂùÄ')),
      );
      return;
    }

    if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}').hasMatch(email)) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ')),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      await FirebaseFirestore.instance.collection('emails').add({
        'email': email,
        'language': 'chinese',
        'timestamp': FieldValue.serverTimestamp(),
      });

      if (mounted) {
        Navigator.of(context).pop(); // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‚úÖ Ê≥®ÂÜåÊàêÂäüÔºÅ\nüéÅ ‰∏ìÂ±ûÁ¶èÂà©Âç≥Â∞ÜÂèëÈÄÅÔºÅ'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 3),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ÂèëÁîüÈîôËØØ: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  void dispose() {
    _emailController.dispose();
    super.dispose();
  }
}
